// source: game.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
goog.exportSymbol('proto.game.CreateGameRequest', null, global);
goog.exportSymbol('proto.game.Game', null, global);
goog.exportSymbol('proto.game.GameListResponse', null, global);
goog.exportSymbol('proto.game.GameQueryRequest', null, global);
goog.exportSymbol('proto.game.UpdateGameRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.GameQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameQueryRequest.displayName = 'proto.game.GameQueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.CreateGameRequest.displayName = 'proto.game.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.UpdateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.UpdateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.UpdateGameRequest.displayName = 'proto.game.UpdateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.Game.displayName = 'proto.game.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.GameListResponse.repeatedFields_, null);
};
goog.inherits(proto.game.GameListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameListResponse.displayName = 'proto.game.GameListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player2id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameQueryRequest}
 */
proto.game.GameQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameQueryRequest;
  return proto.game.GameQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameQueryRequest}
 */
proto.game.GameQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1id(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2id(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1id();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer2id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string player1Id = 1;
 * @return {string}
 */
proto.game.GameQueryRequest.prototype.getPlayer1id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameQueryRequest} returns this
 */
proto.game.GameQueryRequest.prototype.setPlayer1id = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player2Id = 2;
 * @return {string}
 */
proto.game.GameQueryRequest.prototype.getPlayer2id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameQueryRequest} returns this
 */
proto.game.GameQueryRequest.prototype.setPlayer2id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.game.GameQueryRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameQueryRequest} returns this
 */
proto.game.GameQueryRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.game.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player2id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.CreateGameRequest}
 */
proto.game.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.CreateGameRequest;
  return proto.game.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.CreateGameRequest}
 */
proto.game.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1id(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2id(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1id();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer2id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player1Id = 1;
 * @return {string}
 */
proto.game.CreateGameRequest.prototype.getPlayer1id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.CreateGameRequest} returns this
 */
proto.game.CreateGameRequest.prototype.setPlayer1id = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player2Id = 2;
 * @return {string}
 */
proto.game.CreateGameRequest.prototype.getPlayer2id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.CreateGameRequest} returns this
 */
proto.game.CreateGameRequest.prototype.setPlayer2id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.UpdateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.game.UpdateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.UpdateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.UpdateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player1id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    player2id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gamestatus: jspb.Message.getFieldWithDefault(msg, 4, ""),
    whoseturn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    boarddata: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.UpdateGameRequest}
 */
proto.game.UpdateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.UpdateGameRequest;
  return proto.game.UpdateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.UpdateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.UpdateGameRequest}
 */
proto.game.UpdateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1id(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2id(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamestatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhoseturn(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoarddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.UpdateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.UpdateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.UpdateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.UpdateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer1id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayer2id();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGamestatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWhoseturn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBoarddata();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player1Id = 2;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getPlayer1id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setPlayer1id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string player2Id = 3;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getPlayer2id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setPlayer2id = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gameStatus = 4;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getGamestatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setGamestatus = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string whoseTurn = 5;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getWhoseturn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setWhoseturn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string boardData = 6;
 * @return {string}
 */
proto.game.UpdateGameRequest.prototype.getBoarddata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.UpdateGameRequest} returns this
 */
proto.game.UpdateGameRequest.prototype.setBoarddata = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player1id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    player2id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gamestatus: jspb.Message.getFieldWithDefault(msg, 4, ""),
    whoseturn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createdate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    updatedate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    player1data: (f = msg.getPlayer1data()) && user_pb.UserDTO.toObject(includeInstance, f),
    player2data: (f = msg.getPlayer2data()) && user_pb.UserDTO.toObject(includeInstance, f),
    boarddata: jspb.Message.getFieldWithDefault(msg, 10, ""),
    winnerid: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.Game}
 */
proto.game.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.Game;
  return proto.game.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.Game}
 */
proto.game.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1id(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2id(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamestatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhoseturn(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedate(value);
      break;
    case 8:
      var value = new user_pb.UserDTO;
      reader.readMessage(value,user_pb.UserDTO.deserializeBinaryFromReader);
      msg.setPlayer1data(value);
      break;
    case 9:
      var value = new user_pb.UserDTO;
      reader.readMessage(value,user_pb.UserDTO.deserializeBinaryFromReader);
      msg.setPlayer2data(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoarddata(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinnerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer1id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayer2id();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGamestatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWhoseturn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreatedate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUpdatedate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPlayer1data();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      user_pb.UserDTO.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2data();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      user_pb.UserDTO.serializeBinaryToWriter
    );
  }
  f = message.getBoarddata();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWinnerid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.game.Game.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player1Id = 2;
 * @return {string}
 */
proto.game.Game.prototype.getPlayer1id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setPlayer1id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string player2Id = 3;
 * @return {string}
 */
proto.game.Game.prototype.getPlayer2id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setPlayer2id = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gameStatus = 4;
 * @return {string}
 */
proto.game.Game.prototype.getGamestatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setGamestatus = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string whoseTurn = 5;
 * @return {string}
 */
proto.game.Game.prototype.getWhoseturn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setWhoseturn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string createDate = 6;
 * @return {string}
 */
proto.game.Game.prototype.getCreatedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setCreatedate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string updateDate = 7;
 * @return {string}
 */
proto.game.Game.prototype.getUpdatedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setUpdatedate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional user.UserDTO player1Data = 8;
 * @return {?proto.user.UserDTO}
 */
proto.game.Game.prototype.getPlayer1data = function() {
  return /** @type{?proto.user.UserDTO} */ (
    jspb.Message.getWrapperField(this, user_pb.UserDTO, 8));
};


/**
 * @param {?proto.user.UserDTO|undefined} value
 * @return {!proto.game.Game} returns this
*/
proto.game.Game.prototype.setPlayer1data = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.clearPlayer1data = function() {
  return this.setPlayer1data(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.Game.prototype.hasPlayer1data = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional user.UserDTO player2Data = 9;
 * @return {?proto.user.UserDTO}
 */
proto.game.Game.prototype.getPlayer2data = function() {
  return /** @type{?proto.user.UserDTO} */ (
    jspb.Message.getWrapperField(this, user_pb.UserDTO, 9));
};


/**
 * @param {?proto.user.UserDTO|undefined} value
 * @return {!proto.game.Game} returns this
*/
proto.game.Game.prototype.setPlayer2data = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.clearPlayer2data = function() {
  return this.setPlayer2data(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.Game.prototype.hasPlayer2data = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string boardData = 10;
 * @return {string}
 */
proto.game.Game.prototype.getBoarddata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setBoarddata = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string winnerId = 11;
 * @return {string}
 */
proto.game.Game.prototype.getWinnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.Game} returns this
 */
proto.game.Game.prototype.setWinnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.GameListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    proto.game.Game.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameListResponse}
 */
proto.game.GameListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameListResponse;
  return proto.game.GameListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameListResponse}
 */
proto.game.GameListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.Game;
      reader.readMessage(value,proto.game.Game.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.game.Game.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Game games = 1;
 * @return {!Array<!proto.game.Game>}
 */
proto.game.GameListResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.game.Game>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Game, 1));
};


/**
 * @param {!Array<!proto.game.Game>} value
 * @return {!proto.game.GameListResponse} returns this
*/
proto.game.GameListResponse.prototype.setGamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.game.Game=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Game}
 */
proto.game.GameListResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.game.Game, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.game.GameListResponse} returns this
 */
proto.game.GameListResponse.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};


goog.object.extend(exports, proto.game);
